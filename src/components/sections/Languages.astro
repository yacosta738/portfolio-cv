---
import Link from "@atoms/Link.astro";
import Section from "@atoms/Section.astro";
import { type Lang, useTranslations } from "@/i18n";
import { languageMapper } from "@/lib/language-mapper";
import type Language from "@/resume/language/language.model";

interface Props {
	languages?: Language[];
}

const { languages = [] } = Astro.props as Props;

const currentLocale = Astro.params.lang as Lang;
const t = useTranslations(currentLocale);

// Initialize the language mapper
await languageMapper.initialize();
---

{languages.length > 0 && (
	<Section title={t('languages')}>
		<ul class="grid grid-cols-2 gap-2 m-0 p-0 list-none sm:grid-cols-3">
			{languages.map((l) => {
				const key = languageMapper.findLocaleCode(l.language);
				const content = (
					<>
						<strong class="text-gray-900 dark:text-gray-100">{l.language}</strong>
						{l.fluency && (
							<span class="text-gray-600 dark:text-gray-400 font-normal text-sm">
								{' '}â€” {l.fluency}
							</span>
						)}
					</>
				);
				
				return (
					<li class="bg-gray-50 dark:bg-gray-800 p-2 rounded-md text-sm">
						{key ? (
							<Link 
								href={`/${key}/`} 
								variant="subtle"
								class="block"
							>
								{content}
							</Link>
						) : (
							<span>
								{content}
							</span>
						)}
					</li>
				);
			})}
		</ul>
	</Section>
)}


